// Code generated by protoc-gen-go. DO NOT EDIT.
// source: move.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MoveType int32

const (
	MoveType_Direction MoveType = 0
	MoveType_Targets   MoveType = 1
	MoveType_Stop      MoveType = 2
)

var MoveType_name = map[int32]string{
	0: "Direction",
	1: "Targets",
	2: "Stop",
}
var MoveType_value = map[string]int32{
	"Direction": 0,
	"Targets":   1,
	"Stop":      2,
}

func (x MoveType) String() string {
	return proto.EnumName(MoveType_name, int32(x))
}
func (MoveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type Vec3 struct {
	X int64 `protobuf:"varint,1,opt,name=X" json:"X,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=Y" json:"Y,omitempty"`
	Z int64 `protobuf:"varint,3,opt,name=Z" json:"Z,omitempty"`
}

func (m *Vec3) Reset()                    { *m = Vec3{} }
func (m *Vec3) String() string            { return proto.CompactTextString(m) }
func (*Vec3) ProtoMessage()               {}
func (*Vec3) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Vec3) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vec3) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vec3) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type CSEnterReq struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Pos *Vec3 `protobuf:"bytes,2,opt,name=Pos" json:"Pos,omitempty"`
	Dir *Vec3 `protobuf:"bytes,3,opt,name=Dir" json:"Dir,omitempty"`
}

func (m *CSEnterReq) Reset()                    { *m = CSEnterReq{} }
func (m *CSEnterReq) String() string            { return proto.CompactTextString(m) }
func (*CSEnterReq) ProtoMessage()               {}
func (*CSEnterReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CSEnterReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CSEnterReq) GetPos() *Vec3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CSEnterReq) GetDir() *Vec3 {
	if m != nil {
		return m.Dir
	}
	return nil
}

type SCEnterNtf struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Pos *Vec3 `protobuf:"bytes,2,opt,name=Pos" json:"Pos,omitempty"`
	Dir *Vec3 `protobuf:"bytes,3,opt,name=Dir" json:"Dir,omitempty"`
}

func (m *SCEnterNtf) Reset()                    { *m = SCEnterNtf{} }
func (m *SCEnterNtf) String() string            { return proto.CompactTextString(m) }
func (*SCEnterNtf) ProtoMessage()               {}
func (*SCEnterNtf) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SCEnterNtf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SCEnterNtf) GetPos() *Vec3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *SCEnterNtf) GetDir() *Vec3 {
	if m != nil {
		return m.Dir
	}
	return nil
}

type CSMoveStartReq struct {
	MvType int32   `protobuf:"varint,1,opt,name=MvType" json:"MvType,omitempty"`
	Speed  int32   `protobuf:"varint,2,opt,name=Speed" json:"Speed,omitempty"`
	Coords []*Vec3 `protobuf:"bytes,3,rep,name=coords" json:"coords,omitempty"`
}

func (m *CSMoveStartReq) Reset()                    { *m = CSMoveStartReq{} }
func (m *CSMoveStartReq) String() string            { return proto.CompactTextString(m) }
func (*CSMoveStartReq) ProtoMessage()               {}
func (*CSMoveStartReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *CSMoveStartReq) GetMvType() int32 {
	if m != nil {
		return m.MvType
	}
	return 0
}

func (m *CSMoveStartReq) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *CSMoveStartReq) GetCoords() []*Vec3 {
	if m != nil {
		return m.Coords
	}
	return nil
}

type SCMoveStartRsp struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *SCMoveStartRsp) Reset()                    { *m = SCMoveStartRsp{} }
func (m *SCMoveStartRsp) String() string            { return proto.CompactTextString(m) }
func (*SCMoveStartRsp) ProtoMessage()               {}
func (*SCMoveStartRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *SCMoveStartRsp) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type CSMoveStopReq struct {
}

func (m *CSMoveStopReq) Reset()                    { *m = CSMoveStopReq{} }
func (m *CSMoveStopReq) String() string            { return proto.CompactTextString(m) }
func (*CSMoveStopReq) ProtoMessage()               {}
func (*CSMoveStopReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type SCMoveStopRsp struct {
	Ret int32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	Pos *Vec3 `protobuf:"bytes,2,opt,name=Pos" json:"Pos,omitempty"`
	Dir *Vec3 `protobuf:"bytes,3,opt,name=Dir" json:"Dir,omitempty"`
}

func (m *SCMoveStopRsp) Reset()                    { *m = SCMoveStopRsp{} }
func (m *SCMoveStopRsp) String() string            { return proto.CompactTextString(m) }
func (*SCMoveStopRsp) ProtoMessage()               {}
func (*SCMoveStopRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *SCMoveStopRsp) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *SCMoveStopRsp) GetPos() *Vec3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *SCMoveStopRsp) GetDir() *Vec3 {
	if m != nil {
		return m.Dir
	}
	return nil
}

type MoveObjState struct {
	Id     int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	MvType int32   `protobuf:"varint,2,opt,name=MvType" json:"MvType,omitempty"`
	Speed  int32   `protobuf:"varint,3,opt,name=Speed" json:"Speed,omitempty"`
	Coords []*Vec3 `protobuf:"bytes,4,rep,name=coords" json:"coords,omitempty"`
}

func (m *MoveObjState) Reset()                    { *m = MoveObjState{} }
func (m *MoveObjState) String() string            { return proto.CompactTextString(m) }
func (*MoveObjState) ProtoMessage()               {}
func (*MoveObjState) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *MoveObjState) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoveObjState) GetMvType() int32 {
	if m != nil {
		return m.MvType
	}
	return 0
}

func (m *MoveObjState) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *MoveObjState) GetCoords() []*Vec3 {
	if m != nil {
		return m.Coords
	}
	return nil
}

type SCMoveStateNtf struct {
	Ms []*MoveObjState `protobuf:"bytes,1,rep,name=ms" json:"ms,omitempty"`
}

func (m *SCMoveStateNtf) Reset()                    { *m = SCMoveStateNtf{} }
func (m *SCMoveStateNtf) String() string            { return proto.CompactTextString(m) }
func (*SCMoveStateNtf) ProtoMessage()               {}
func (*SCMoveStateNtf) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *SCMoveStateNtf) GetMs() []*MoveObjState {
	if m != nil {
		return m.Ms
	}
	return nil
}

func init() {
	proto.RegisterType((*Vec3)(nil), "protocol.Vec3")
	proto.RegisterType((*CSEnterReq)(nil), "protocol.CSEnterReq")
	proto.RegisterType((*SCEnterNtf)(nil), "protocol.SCEnterNtf")
	proto.RegisterType((*CSMoveStartReq)(nil), "protocol.CSMoveStartReq")
	proto.RegisterType((*SCMoveStartRsp)(nil), "protocol.SCMoveStartRsp")
	proto.RegisterType((*CSMoveStopReq)(nil), "protocol.CSMoveStopReq")
	proto.RegisterType((*SCMoveStopRsp)(nil), "protocol.SCMoveStopRsp")
	proto.RegisterType((*MoveObjState)(nil), "protocol.MoveObjState")
	proto.RegisterType((*SCMoveStateNtf)(nil), "protocol.SCMoveStateNtf")
	proto.RegisterEnum("protocol.MoveType", MoveType_name, MoveType_value)
}

func init() { proto.RegisterFile("move.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0xc1, 0x4f, 0xc2, 0x30,
	0x14, 0xc6, 0x5d, 0x0b, 0x88, 0x0f, 0x98, 0x4b, 0x63, 0xc8, 0x8e, 0x64, 0x07, 0x62, 0x3c, 0x10,
	0x22, 0x17, 0xef, 0xc3, 0x03, 0x07, 0xd4, 0xb4, 0xc4, 0x00, 0x27, 0x61, 0x7b, 0x98, 0x19, 0xa1,
	0xa3, 0x6d, 0x48, 0xfc, 0xef, 0x4d, 0xcb, 0xc8, 0x48, 0x5c, 0x3c, 0xe9, 0x69, 0xfb, 0xd6, 0x7e,
	0xfd, 0xbd, 0xfd, 0x0a, 0xb0, 0x95, 0x07, 0x1c, 0xe4, 0x4a, 0x1a, 0xc9, 0x9a, 0xee, 0x91, 0xc8,
	0xcf, 0x68, 0x08, 0xb5, 0x57, 0x4c, 0x46, 0xac, 0x0d, 0xde, 0x3c, 0xf4, 0x7a, 0xde, 0x2d, 0xe5,
	0xde, 0xdc, 0xa6, 0x45, 0x48, 0x8e, 0x69, 0x61, 0xd3, 0x32, 0xa4, 0xc7, 0xb4, 0x8c, 0xde, 0x00,
	0x62, 0xf1, 0xb8, 0x33, 0xa8, 0x38, 0xee, 0x99, 0x0f, 0x64, 0x92, 0x16, 0x45, 0x32, 0x49, 0x59,
	0x0f, 0xe8, 0x8b, 0xd4, 0xae, 0xdb, 0xba, 0xf7, 0x07, 0x27, 0xce, 0xc0, 0x42, 0xb8, 0x5d, 0xb2,
	0x3b, 0xc6, 0x99, 0x72, 0xe7, 0x55, 0xec, 0x18, 0x67, 0xca, 0x12, 0x44, 0xec, 0x08, 0x4f, 0x66,
	0xf3, 0x2f, 0x84, 0x0d, 0xf8, 0xb1, 0x98, 0xca, 0x03, 0x0a, 0xb3, 0x52, 0xc6, 0xfe, 0x47, 0x17,
	0x1a, 0xd3, 0xc3, 0xec, 0x2b, 0x47, 0x47, 0xaa, 0xf3, 0x22, 0xb1, 0x1b, 0xa8, 0x8b, 0x1c, 0x31,
	0x75, 0xbc, 0x3a, 0x3f, 0x06, 0xd6, 0x87, 0x46, 0x22, 0xa5, 0x4a, 0x75, 0x48, 0x7b, 0xb4, 0x02,
	0x52, 0xac, 0x46, 0x11, 0xf8, 0x22, 0x2e, 0x39, 0x3a, 0x67, 0x01, 0x50, 0x8e, 0xa6, 0x80, 0xd8,
	0xd7, 0xe8, 0x1a, 0x3a, 0xa7, 0x59, 0x64, 0xce, 0x71, 0x1f, 0x21, 0x74, 0x4e, 0x25, 0x99, 0x57,
	0x76, 0xfe, 0xc4, 0x81, 0x81, 0xb6, 0x85, 0x3c, 0xaf, 0x3f, 0x84, 0x59, 0x19, 0xfc, 0xe1, 0xb9,
	0x34, 0x42, 0xaa, 0x8d, 0xd0, 0x6a, 0x23, 0xb5, 0x5f, 0x8d, 0x3c, 0x9c, 0x19, 0x31, 0x68, 0xef,
	0xb7, 0x0f, 0x64, 0xab, 0x43, 0xcf, 0xb5, 0xba, 0x65, 0xeb, 0x7c, 0x36, 0x4e, 0xb6, 0xfa, 0x6e,
	0x08, 0x4d, 0xfb, 0xcd, 0xcd, 0xd0, 0x81, 0xab, 0x71, 0xa6, 0x30, 0x31, 0x99, 0xdc, 0x05, 0x17,
	0xac, 0x05, 0x97, 0xb3, 0x95, 0x7a, 0x47, 0xa3, 0x03, 0x8f, 0x35, 0xa1, 0x66, 0xc5, 0x05, 0x64,
	0xdd, 0x70, 0x87, 0x8d, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x80, 0xf1, 0x68, 0xfa, 0x02,
	0x00, 0x00,
}
